@using Microsoft.Extensions.Logging
@using NDiscoPlus.Code.LightHandlers.Hue
@using System.Collections.Immutable
@using NDiscoPlus.Code.NDPIcons
@using NDiscoPlus.PhilipsHue.BridgeDiscovery
@using NDiscoPlus.PhilipsHue.BridgeDiscovery.Models

@inject ILogger<HueFindBridgesSubEditor> logger

<MudPaper Class="mud-theme-primary" Elevation="3">
    <MudList T="object">
        <MudListSubheader Class="shades-text text-white">
            <MudStack Row="true" AlignItems="AlignItems.Center">
                <div>
                    <MudText><h4>@GetBridgesFoundText()</h4></MudText>
                    @if (loadBridgesTask?.IsCompleted == false)
                    {
                        <MudText Typo="Typo.caption">@GetMulticastSecondsRemaining()</MudText>
                    }
                </div>
                <MudSpacer />

                @if (loadBridgesTask?.IsCompleted != false)
                {
                    <MudTooltip Delay="500" Text="Reload Bridges" Placement="Placement.Top">
                        <MudIconButton OnClick="ReloadBridges"
                                       Color="Color.Inherit"
                                       Icon="@(Icons.Material.Rounded.Refresh)" />
                    </MudTooltip>
                }
                else
                {
                    <MudProgressCircular Value="@(multicastElapsedSeconds + 1)" Max="@multicastSeconds"
                                         Color="Color.Inherit"/>
                }
            </MudStack>
        </MudListSubheader>

        @if (loadBridgesTask?.IsCompleted == true && loadBridgesTask.Result is not null)
        {
            @foreach (DiscoveredBridge bridge in loadBridgesTask.Result)
            {
                <MudListItem OnClick="@(() => SelectBridge(bridge))"
                             Icon="@(HueIcons.BridgeV2)"
                             Text="@(bridge.Name ?? bridge.BridgeId)"
                             SecondaryText="@(bridge.IpAddress)" />
            }
        }
    </MudList>
</MudPaper>

@code {
    [CascadingParameter]
    public required HueLightHandlerConfig Config { get; init; }

    [CascadingParameter]
    public required Action ConfigHasChanged { get; init; }

    private Task<ImmutableArray<DiscoveredBridge>?>? loadBridgesTask;

    private const int multicastSeconds = 11;
    private int multicastElapsedSeconds = -1;

    protected override void OnInitialized()
    {
        ReloadBridges();
    }

    private void ReloadBridges()
    {
        loadBridgesTask = _LoadBridges();
        loadBridgesTask.ContinueWith(_ => StateHasChanged(), TaskContinuationOptions.ExecuteSynchronously);
        _ = UpdateMulticastProgress();
    }

    private async Task UpdateMulticastProgress()
    {
        multicastElapsedSeconds = 0;

        using PeriodicTimer pt = new(TimeSpan.FromSeconds(1));

        while (await pt.WaitForNextTickAsync())
        {
            multicastElapsedSeconds++;
            StateHasChanged();

            if (multicastElapsedSeconds >= multicastSeconds)
                break;
        }
    }

    private async Task<ImmutableArray<DiscoveredBridge>?> _LoadBridges()
    {
        DiscoveredBridge[]? bridges;
        try
        {
            bridges = await HueBridgeDiscovery.Multicast(TimeSpan.FromSeconds(multicastSeconds));
        }
        catch (Exception e)
        {
            logger.LogError("An error occured when discovering bridges:\n{}", e);
            bridges = null;
        }

        return bridges?.ToImmutableArray();
    }

    private void SelectBridge(DiscoveredBridge bridge)
    {
        throw new NotImplementedException();
    }

    private string GetBridgesFoundText()
    {
        if (loadBridgesTask?.IsCompleted != true)
            return $"Loading...";
        else if (!loadBridgesTask.Result.HasValue)
            return "Unknown error.";
        else
            return $"{loadBridgesTask.Result.Value.Length} bridges found";
    }

    private string GetMulticastSecondsRemaining()
    {
        int remaining = multicastSeconds - multicastElapsedSeconds - 1;
        if (remaining != 1)
            return $"{remaining} seconds remaining";
        else
            return $"{remaining} second remaining";
    }
}