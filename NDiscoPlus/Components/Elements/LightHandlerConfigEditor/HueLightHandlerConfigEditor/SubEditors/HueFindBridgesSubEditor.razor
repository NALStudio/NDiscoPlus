@using Microsoft.Extensions.Logging
@using NDiscoPlus.Code.LightHandlers.Hue
@using System.Collections.Immutable
@using NDiscoPlus.Code.NDPIcons
@using NDiscoPlus.PhilipsHue.BridgeDiscovery
@using NDiscoPlus.PhilipsHue.BridgeDiscovery.Models
@using System.Collections.Concurrent

@inject ILogger<HueFindBridgesSubEditor> logger

<MudPaper Class="mud-theme-primary" Elevation="3">
    <MudList T="object" Disabled="@(loadBridgesTask?.IsCompleted != true)">
        <MudListSubheader Class="shades-text text-white">
            <MudStack Row="true" AlignItems="AlignItems.Center">
                <div>
                    <MudText><h4>@GetBridgesFoundText()</h4></MudText>
                    @if (loadBridgesTask?.IsCompleted == false)
                    {
                        <MudText Typo="Typo.caption">@GetMulticastSecondsRemaining()</MudText>
                    }
                </div>
                <MudSpacer />

                @if (loadBridgesTask?.IsCompleted != false)
                {
                    <MudTooltip Delay="500" Text="Reload Bridges" Placement="Placement.Top">
                        <MudIconButton OnClick="ReloadBridges"
                                       Color="Color.Inherit"
                                       Icon="@(Icons.Material.Rounded.Refresh)" />
                    </MudTooltip>
                }
                else
                {
                    <MudProgressCircular Value="@(multicastElapsedSeconds + 1)" Max="@multicastSeconds"
                                         Color="Color.Inherit"/>
                }
            </MudStack>
        </MudListSubheader>
        @foreach (DiscoveredBridge bridge in GetBridgesToDisplay())
        {
            <MudListItem OnClick="@(() => SelectBridge(bridge))">
                <ChildContent>
                    @(bridge.Name ?? bridge.BridgeId)
                    <MudText Style="font-weight:500" Typo="Typo.subtitle2">@(bridge.IpAddress)</MudText>
                </ChildContent>
                <AvatarContent>
                    <MudIcon Icon="@(HueIcons.BridgeV2)" />
                </AvatarContent>
            </MudListItem>
        }
    </MudList>
</MudPaper>

@code {
    [Parameter]
    public required HueLightHandlerConfig Config { get; init; }

    [Parameter]
    public required Action ConfigHasChanged { get; init; }

    private Task<ImmutableArray<DiscoveredBridge>?>? loadBridgesTask;
    private ConcurrentBag<DiscoveredBridge> interimDiscoveredBridges = new();

    private const int multicastSeconds = 11;
    private int multicastElapsedSeconds = -1;

    protected override void OnInitialized()
    {
        ReloadBridges();
    }

    private void ReloadBridges()
    {
        interimDiscoveredBridges.Clear();
        loadBridgesTask = _LoadBridges();
        loadBridgesTask.ContinueWith(_ => StateHasChanged(), TaskContinuationOptions.ExecuteSynchronously);
        _ = UpdateMulticastProgress();
    }

    private IEnumerable<DiscoveredBridge> GetBridgesToDisplay()
    {
        if (loadBridgesTask?.IsCompleted == true)
        {
            if (loadBridgesTask.Result is not null)
                return loadBridgesTask.Result;
            else
                return Enumerable.Empty<DiscoveredBridge>();
        }
        else
        {
            return interimDiscoveredBridges;
        }
    }

    private async Task UpdateMulticastProgress()
    {
        multicastElapsedSeconds = 0;

        using PeriodicTimer pt = new(TimeSpan.FromSeconds(1));

        while (await pt.WaitForNextTickAsync())
        {
            multicastElapsedSeconds++;
            StateHasChanged();

            if (multicastElapsedSeconds >= multicastSeconds)
                break;
        }
    }

    private void _NewBridgeFound(DiscoveredBridge bridge)
    {
        interimDiscoveredBridges.Add(bridge);
        // StateHasChanged();
        // UpdateMulticastProgress refreshes the component once in a while
        // we'll use that to update the bridges as well since Multicast callback is from a different thread
    }

    private async Task<ImmutableArray<DiscoveredBridge>?> _LoadBridges()
    {
        DiscoveredBridge[]? bridges;
        try
        {
            bridges = await HueBridgeDiscovery.Multicast(TimeSpan.FromSeconds(multicastSeconds), _NewBridgeFound);
        }
        catch (Exception e)
        {
            logger.LogError("An error occured when discovering bridges:\n{}", e);
            bridges = null;
        }

        return bridges?.ToImmutableArray();
    }

    private void SelectBridge(DiscoveredBridge bridge)
    {
        Config.BridgeIP = bridge.IpAddress;
        ConfigHasChanged();
    }

    private string GetBridgesFoundText()
    {
        if (loadBridgesTask?.IsCompleted != true)
            return $"Loading...";
        else if (!loadBridgesTask.Result.HasValue)
            return "Unknown error.";

        ImmutableArray<DiscoveredBridge> bridges = loadBridgesTask.Result.Value;
        if (bridges.Length == 1)
            return $"{bridges.Length} bridge found";
        else
            return $"{bridges.Length} bridges found";
    }

    private string GetMulticastSecondsRemaining()
    {
        int remaining = multicastSeconds - multicastElapsedSeconds - 1;
        if (remaining != 1)
            return $"{remaining} seconds remaining";
        else
            return $"{remaining} second remaining";
    }
}