@page "/"

@using Microsoft.Extensions.Logging
@using MudBlazor.Utilities
@using NDiscoPlus.Code
@using NDiscoPlus.Code.FocusModeProvider
@using NDiscoPlus.Code.HomePagePlayer
@using NDiscoPlus.Code.JavaScriptInterop
@using NDiscoPlus.Code.LightHandlers
@using NDiscoPlus.Code.LightHandlers.Screen
@using NDiscoPlus.Code.Models
@using NDiscoPlus.Code.Models.LightProfile
@using NDiscoPlus.Components.Elements
@using NDiscoPlus.Components.Elements.GradientCanvas
@using NDiscoPlus.Components.Layout
@using NDiscoPlus.Shared
@using NDiscoPlus.Shared.Effects.API.Channels.Effects.Intrinsics
@using NDiscoPlus.Shared.Helpers
@using NDiscoPlus.Shared.Models.Color
@using NDiscoPlus.Shared.Music
@using NDiscoPlus.Shared.Models
@using NDiscoPlus.Spotify.Models
@using NDiscoPlus.Spotify.Players
@using NDiscoPlus.Components;
@using NDiscoPlus.Spotify.Players.WebPlayer
@using SpotifyAPI.Web
@using System.Diagnostics
@using System.Text.Json
@using System.Web
@using System.Globalization
@using System.Collections.Frozen
@using System.Collections.Immutable
@using System.Collections.Concurrent
@using System.Diagnostics.CodeAnalysis

@layout SpotifyLayout

@inject NavigationManager navigationManager
@inject ILogger<HomePage> logger
@inject ILogger<NDPPlayer> playerLogger
@inject ILogger<NewSpotifyWebPlayer> spotifyPlayerLogger
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar
@inject SpotifyService Spotify
@inject IFocusModeProvider focusMode

@implements IAsyncDisposable

<!-- Page title not needed in MAUI Blazor
<PageTitle>@("NDiscoPlus" + (interpreterFps is InterpreterFPS fps ? $" - {fps.Average:0.00} fps ({fps.Min:0.00} min)" : string.Empty))</PageTitle>
-->

<div @onmousemove="OnMouseMove" style=@AddCursorStyle("width:100vw; height:100vh; overflow: hidden;")>
    <div style="position:fixed;top:0;bottom:0;left:0;right:0;">
        @if (data?.ScreenLightHandlers is ImmutableArray<BaseScreenLightHandler> screenLightHandlers)
        {
            foreach (BaseScreenLightHandler screenHandler in screenLightHandlers)
            {
                BaseScreenLightHandler.RenderData? renderData = screenHandler.Render(width: windowSize?.Width ?? 1920, height: windowSize?.Height ?? 1080);
                if (renderData.HasValue)
                {
                    <DynamicComponent Type="@(renderData.Value.ComponentType)" Parameters="@(renderData.Value.ComponentArgs)" />
                }
            }
        }
        else
        {
            <CornerGradientCanvas Colors="@(BestGradientOption.Colors)"
                                  Width="@(windowSize?.Width ?? 1920)"
                                  Height="@(windowSize?.Height ?? 1080)" />
        }
    </div>
    <!-- padding-top:20vh and Justify.FlexStart since centering the item looks a bit stupid... Moving the elements slightly up looks nicer. -->
    <MudStack AlignItems="AlignItems.Center" Justify="Justify.FlexStart" Style="padding-top:20vh;position:absolute;top:0;left:0;right:0;bottom:0;">
        @if(Context is not null) {
            <MudImage
                Src="@Context.Track.LargestImage.Url"
                Width="256"
                Height="256"/>
        }
        else
        {
            <div style="background:#1DB954;padding:64px">
                <MudImage
                    Src="./img/spotify_icon_white.svg"
                    Width="128"
                    Height="128"/>
            </div>
        }
        <div style="min-width:256px;">
            <MudText Style="line-height:1.0; font-size:x-large;"><b>@(Context?.Track.Name ?? "Not Playing...")</b></MudText>
            @if(Context is not null)
            {
                <MudText Style="font-size:medium;padding-bottom:1em">@string.Join(", ", Context.Track.Artists)</MudText>
            }
        </div>
        <div style="width:80%; max-width:512px; padding-bottom:64px">
            @if(Context is not null)
            {
                <MudProgressLinear
                    Value="@(Context.Progress.TotalSeconds)"
                    Min="0"
                    Max="@(Context.Track.Length.TotalSeconds)"
                    Rounded="true"
                    />
                <MudStack Style="" Row="true" Justify="Justify.SpaceBetween">
                    <MudText Style="line-height:2; font-size:small;">@(Context.Progress.ToString(TimespanFormat))</MudText>
                    <MudText Style="line-height:2; font-size:small;">@(Context.Track.Length.ToString(TimespanFormat))</MudText>
                </MudStack>
            }
        </div>
        @if (!HideUI)
        {
            <MudButton StartIcon="@Icons.Material.Rounded.Lightbulb"
                        Variant="@(isPlaying ? Variant.Outlined : Variant.Filled)"
                        Size=Size.Large
                        Color=MudBlazor.Color.Primary
                        Disabled=@(!Spotify.IsLoggedIn || playStarting)
                        OnClick=TogglePlay>
                    @(isPlaying ? "Stop" : "Play")
            </MudButton>
        }
    </MudStack>
    @if (!HideUI)
    {
        <MudStack Style="position:fixed; top:0; left:0; padding:16px">
            <MudTooltip Text="Open Settings" Placement="Placement.Right" Delay="1000">
                <MudIconButton Icon="@Icons.Material.Rounded.Settings"
                                Size="Size.Large"
                                OnClick="OpenSettings"
                                Disabled="isPlaying" />
            </MudTooltip>
            <MudTooltip Text="Toggle Fullscreen" Placement="Placement.Right" Delay="1000">
                <MudIconButton Icon="@(!focusMode.IsFocusModeEnabled ? Icons.Material.Rounded.Fullscreen : Icons.Material.Rounded.FullscreenExit)"
                                Size="Size.Large"
                                OnClick="ToggleFullscreen" />
            </MudTooltip>
            <MudTooltip Text="@($"Turn {(IsWakeLockEnabled ? "Off" : "On")} Wake Lock")" Placement="Placement.Right" Delay="1000">
                <MudToggleIconButton Icon="@(Icons.Material.Rounded.Brightness4)"
                                        ToggledIcon="@(Icons.Material.Rounded.Brightness5)"
                                        Size="Size.Large"
                                        Toggled="IsWakeLockEnabled"
                                        ToggledChanged="@SetWakeLock"/>
            </MudTooltip>

            @if (IsDebugEnabled)
            {
                <MudTooltip Text="DEBUG: Open Debug Canvas" Placement="Placement.Right" Delay="1000">
                    <MudIconButton Icon="@(Icons.Material.Rounded.BugReport)"
                                   Size="Size.Large"
                                   OnClick="@OpenDebugCanvas" />
                </MudTooltip>
            }

            @* Not yet implemented in MAUI Blazor version of this app
            @if (DebugEnabled)
            {
                <MudTooltip Text="DEBUG: Open Effect Visualizer" Placement="Placement.Right" Delay="1000">
                    <MudIconButton Disabled="@(lightHandling?.CurrentData is null)"
                                    Icon="@Icons.Material.Rounded.BugReport"
                                    Size="Size.Large"
                                    OnClick="@(async () => await DebugOpenEffectVisualizer(lightHandling!.CurrentData!))" />
                </MudTooltip>
                <!-- Didn't work... Hot Reload changes didn't apply.
                <MudTooltip Text="DEBUG: Restart NDP And Regenerate Effects" Placement="Placement.Right" Delay="1000">
                    <MudIconButton Disabled="(lightHandling is null)"
                                    Icon="Icons.Material.Rounded.Refresh"
                                    Size="Size.Large"
                                    OnClick="(async () => await DebugRestartServiceAndRegenerateEffects())" />
                </MudTooltip>
                -->
            }
            *@
        </MudStack>
    }
    <MudStack AlignItems="AlignItems.End" Style="">
        @if(Context?.NextTrack is SpotifyPlayerTrack nextTrack)
        {
            <MudPaper Elevation="8" Class="next_track_fadein" Style="position: fixed; top:24px; right: 24px; background:#000000AA; padding:16px; border-radius:16px;">
            <MudStack Row="true" AlignItems="AlignItems.Center">
                <MudImage Src=@(nextTrack.SmallestImage.Url)
                        Width="48"
                        Height="48" />
                <MudStack Spacing="0">
                    <MudText Style="font-size:small; color:#FFFFFFAA">
                        Next Track
                    </MudText>
                    <MudText Style="line-height:1.0; font-size:x-large; white-space:nowrap; color:white">
                        @(nextTrack.Name)
                    </MudText>
                </MudStack>
            </MudStack>
        </MudPaper>
        }
    </MudStack>
</div>

<style>
.next_track_fadein {
    animation: fadein 2s;
}

@@keyframes fadein {
    from {
        opacity: 0;
    }

    to {
        opacity: 1;
    }
}
</style>

@code {
    private const bool IsDebugEnabled =
#if DEBUG
    true;
#else
    false;
#endif

    const string TimespanFormat = @"mm\:ss";

    static readonly FourColorGradient defaultGradient = FourColorGradient.TryCreateFromPalette(NDPDefaultPalettes.DefaultSRGB)!.Value;
    private FourColorGradient BestGradientOption => data?.CurrentTrackPaletteGradient ?? defaultGradient;

    NDPPlayer? player = null;
    Task? playerTask = null;

    NDPPlayer.SharedData? data = null;
    private SpotifyPlayerContext? Context => data?.PlayerState;

    bool isPlaying = false;
    bool playStarting = false;

    PeriodicTimer? uiTimer = null;

    private bool IsWakeLockEnabled => DeviceDisplay.Current.KeepScreenOn;

    private WindowSizeProvider? windowSize;

    protected override async Task OnInitializedAsync()
    {
        windowSize = await WindowSizeProvider.CreateAsync(JSRuntime);

        await Spotify.WaitForLogin();

        Debug.Assert(Spotify.IsLoggedIn);
        player = new NDPPlayer(Spotify.Client, logger: playerLogger, playerLogger: spotifyPlayerLogger);
        playerTask = player.Run();

        RunUiUpdateLoopAsync();
    }

    #region Hide Mouse & UI Buttons
    object hideCursorLock = new();
    bool _hideCursor = false;

    uint hideCursorTimerSeconds = 0; // use uint so that we never overflow (overflow time is more than 136 years)
    const uint hideCursorAfterSeconds = 3;
    System.Threading.Timer? hideCursorTimer = null;

    bool HideUI
    {
        get
        {
            bool value;
            lock(hideCursorLock)
            {
                value = _hideCursor;
            }
            return value;
        }
        set
        {
            lock(hideCursorLock)
            {
                _hideCursor = value;
            }
        }
    }
    string AddCursorStyle(string css)
    {
        if (HideUI)
            return "cursor: none; " + css;
        else
            return css;
    }

    void HideCursorTick(object? state) {
        ulong incremented = Interlocked.Increment(ref hideCursorTimerSeconds);
        if (incremented >= hideCursorAfterSeconds) // hide cursor timer when enough seconds have elapsed. Timer accuracy is ~1 second.
            HideUI = true;
    }

    void OnMouseMove() => ResetCursorHide();
    void ResetCursorHide()
    {
        Interlocked.Exchange(ref hideCursorTimerSeconds, 0);
        HideUI = false;
    }
    #endregion

    #region
    private static TimeSpan FPS2Period(double fps)
        => TimeSpan.FromSeconds(1d / fps);

    private async void RunUiUpdateLoopAsync()
    {
        if (player is null)
            throw new InvalidOperationException("Player not started.");

        TimeSpan notPlayingPeriod = FPS2Period(3d);
        TimeSpan playingPeriod = FPS2Period(NDPPlayer.TargetFps);

        FpsLogger fpsLogger = new(logger, measurePeriodSeconds: 5, prefix: "UI Update ");

        uiTimer = new PeriodicTimer(notPlayingPeriod);
        while (await uiTimer.WaitForNextTickAsync())
        {
            TimeSpan targetPeriod = isPlaying ? playingPeriod : notPlayingPeriod;
            if (uiTimer.Period != targetPeriod)
                uiTimer.Period = targetPeriod;

            data = player.GetData();
            StateHasChanged();

            fpsLogger.Tick();
        }

        data = null;
    }
    #endregion

    #region Button Handlers
    /* TODO: Missing after porting to MAUI
    async Task DebugOpenEffectVisualizer(NDPData data)
    {
    ArgumentNullException.ThrowIfNull(data, nameof(data));

    string serializedData = NDPData.Serialize(data);
    await localStorage.SetItemAsStringAsync("effectVisualizerNDPData", serializedData);

        TrackAudioAnalysis? analysis;
        if (Spotify.IsLoggedIn)
        analysis = await Spotify.Client.Tracks.GetAudioAnalysis(data.Track.Id);
    else
    analysis = null;

    string serializedAnalysis = analysis is not null ? JsonSerializer.Serialize(analysis) : string.Empty;
    await localStorage.SetItemAsStringAsync("effectVisualizerTrackAnalysis", serializedAnalysis);

    await JSRuntime.InvokeVoidAsync("open", navigationManager.ToAbsoluteUri($"./effectVisualizer").AbsoluteUri, "_blank");
    }
    */

    /* Didn't work... Hot Reload changes didn't apply
    async Task DebugRestartServiceAndRegenerateEffects()
        {
        await CreateNDPService(recreate: true);
        lightHandling!.CurrentDataTask = null;
    }
    */

    void OpenDebugCanvas()
    {
        navigationManager.NavigateTo("./debug");
    }

    void OpenSettings()
    {
        // Fix back navigation breaking background gradient by force loading (which makes the app force load when navigating backwards)
        // UPDATE: Back navigation doesn't break background gradient anymore but spotify player state is duplicated during back navigation
        // UPDATE 2: We now cancel the Spotify player
        navigationManager.NavigateTo("./settings");
    }

    void ToggleFullscreen()
    {
        if (focusMode.IsFocusModeEnabled)
            focusMode.DisableFocusMode();
        else
            focusMode.EnableFocusMode();
        SetWakeLock(focusMode.IsFocusModeEnabled);
    }

    void SetWakeLock(bool enabled)
    {
        DeviceDisplay.Current.KeepScreenOn = enabled;

        if (enabled)
        {
            Snackbar.Add("Wake Lock Enabled", Severity.Warning, static config =>
            {
                config.Icon = Icons.Material.Rounded.Brightness5;
                config.IconColor = Color.Warning;
                config.SnackbarVariant = Variant.Outlined;
                config.DuplicatesBehavior = SnackbarDuplicatesBehavior.Allow;
            });
        }
        else
        {
            Snackbar.Add("Wake Lock Disabled", Severity.Normal, static config =>
            {
                config.Icon = Icons.Material.Rounded.Brightness4;
                config.IconColor = Color.Primary;
                config.SnackbarVariant = Variant.Outlined;
                config.DuplicatesBehavior = SnackbarDuplicatesBehavior.Allow;
            });
        }
    }

    async Task TogglePlay()
    {
        if (playStarting)
            throw new InvalidOperationException("Play toggle is already in progress!");

        playStarting = true;

        if (isPlaying)
            await InternalStopPlaying();
        else
            await InternalStartPlaying();

        playStarting = false;
    }
    #endregion

    #region Lights
    async Task InternalStartPlaying()
    {
        if (hideCursorTimer is null)
        {
            hideCursorTimer = new Timer(HideCursorTick, null, TimeSpan.Zero, TimeSpan.FromSeconds(1));
        }

        await Task.Delay(500);

        LightProfile profile = LightProfile.LoadCurrent();

        Stopwatch startupTimer = Stopwatch.StartNew();

        bool startSuccessful = true;
        ErrorMessageCollector errors = new();
        List<NDPLight> lights = new();
        foreach (LightHandler handler in profile.Handlers)
        {
            NDPLight[]? startedLights = await handler.Start(errors);
            if (startedLights is not null)
                lights.AddRange(startedLights);
            else
                startSuccessful = false;
        }


        if (!startSuccessful)
        {
            logger.LogError("Start unsuccesful.");
            foreach (LightHandler handler in profile.Handlers)
                await handler.Stop();
            await InternalStopPlaying();

            foreach (string error in errors.Collect())
                Snackbar.Add(error, Severity.Error, config => config.RequireInteraction = true);

            return;
        }

        ImmutableArray<LightRecord> lightRecords = profile.BuildLightRecords(lights).ToImmutableArray();
        foreach (LightHandler handler in profile.Handlers)
            await handler.OnAfterStart(lightRecords);

        startupTimer.Stop();
        if (startupTimer.Elapsed > TimeSpan.FromSeconds(5))
            logger.LogWarning("Light handler startup took over 5 seconds. Please note that at around 10 seconds, the Philips Hue entertainment connection gets terminated.");

        player!.StartLights(
            new NDPPlayer.LightData()
            {
                Handlers = profile.Handlers.ToImmutableArray(),
                Lights = lightRecords
            }
        );
        isPlaying = true;

        StateHasChanged();
    }

    async Task InternalStopPlaying()
    {
        if (hideCursorTimer is not null)
        {
            hideCursorTimer.Dispose();
            hideCursorTimer = null;
            ResetCursorHide();
        }

        await Task.Delay(500);

        // player might be null when page has been disposed
        NDPPlayer.LightData? lights = player?.StopLights();
        if (lights.HasValue)
        {
            foreach (LightHandler handler in lights.Value.Handlers)
                await handler.Stop();
        }
        isPlaying = false;

        StateHasChanged();
    }
    #endregion

    public async ValueTask DisposeAsync()
    {
        await InternalStopPlaying();

        uiTimer?.Dispose();

        player?.Dispose();
        if (playerTask is not null)
            await playerTask;

        if (windowSize is not null)
            await windowSize.DisposeAsync();
    }
}
